tags : medium, average T O(nlogn) worst case O(n^2), average S(logn) worst O(n)
link : https://www.geeksforgeeks.org/problems/quick-sort/1

class Solution
{
    //Function to sort an array using quick sort algorithm.
    static void quickSort(int arr[], int low, int high)
    {
        // code here
        //base condition
        if(low<high){
            //arrage the array lower on left and higher on right of pivot then return its(pivot) index
            int partitionIndex=partition(arr, low, high);
            
            //recurion on left and right of pivot 
            quickSort(arr, low, partitionIndex-1);
            quickSort(arr, partitionIndex+1, high);
        }
        
    }
    
    static int partition(int arr[], int low, int high)
    {
        // your code here
        //we consider first element as pivot
        int pivot=arr[low];
        int i=low;
        int j=high;
        
        while(i<j){
            //traverse from left untill we find element greater than pivot
            //(i stoped at index having value greater than pivot)
            while(arr[i]<=pivot && i<=high-1){
                i++;
            }
            
            //traverse from right untill we find element less than pivot
            //(j stoped at index having value less than pivot)
            while(arr[j]>pivot && j>=low+1){
                j--;
            }
            
            //swap ith and jth values
            if(i<j){
                swap(arr, i, j);
            }
        }
        
        //once values grouped j will present at right most of group having value less than pivot
        // swap low(pivot index) and jth value
        swap(arr, low, j);
        
        // returing new value of pivot
        return j;
    }
    
    static void swap(int arr[], int i, int j){
        int temp = arr[i];
        arr[i]=arr[j];
        arr[j]=temp;
        
    }
}

-----
Problem :
-------
Quick Sort is a Divide and Conquer algorithm. It picks an element as a pivot and partitions the given array around the picked pivot.
Given an array arr[], its starting position is low (the index of the array) and its ending position is high(the index of the array).

Note: The low and high are inclusive.

Implement the partition() and quickSort() functions to sort the array.

Example 1:

Input: 
N = 5 
arr[] = { 4, 1, 3, 9, 7}
Output:
1 3 4 7 9
Example 2:

Input: 
N = 9
arr[] = { 2, 1, 6, 10, 4, 1, 3, 9, 7}
Output:
1 1 2 3 4 6 7 9 10
Your Task: 
You don't need to read input or print anything. Your task is to complete the functions partition()  and quickSort() which takes the array arr[], low and high as input parameters and partitions the array. Consider the last element as the pivot such that all the elements less than(or equal to) the pivot lie before it and the elements greater than it lie after the pivot.

Expected Time Complexity: O(N*logN)
Expected Auxiliary Space: O(logN)

Constraints:
1 <= N <= 103
1 <= arr[i] <= 104
